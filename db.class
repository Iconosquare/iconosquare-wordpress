<?php

/**
 * Description of db
 *
 * @author gaetan
 */
class db {
    
    public function getTableName()
    {
        global $wpdb;
        return $wpdb->prefix . "statigram_widget";        
    }
    
  
    /**
     * Create database table for widget
     * 
     * call register_activation_hook(__FILE__,'dbInstall'); in activation plugin file
     * 
     * @return null 
     */
    public function dbInstall()
    {
        $table_name = self::getTableName(); 

        $sql = "CREATE TABLE IF NOT EXISTS `$table_name` (
                `content` enum('myfeed','hashtag') NOT NULL DEFAULT 'myfeed',
                `username` varchar(255) NOT NULL,
                `hashtag` varchar(255) NOT NULL,
                `linking` enum('statigram','instagram') NOT NULL DEFAULT 'statigram',
                `infos` tinyint(1) NOT NULL DEFAULT '1',
                `width` int(6) NOT NULL DEFAULT '380',
                `height` int(6) NOT NULL DEFAULT '420',
                `mode` enum('grid','slideshow') NOT NULL DEFAULT 'grid',
                `pace` int(6) NOT NULL DEFAULT '10',
                `layoutX` int(1) NOT NULL DEFAULT '3',
                `layoutY` int(1) NOT NULL DEFAULT '2',
                `padding` int(6) NOT NULL DEFAULT '10',
                `photoBorder` tinyint(1) NOT NULL DEFAULT '1',
                `background` varchar(6) NOT NULL DEFAULT 'FFFFFF',
                `text` varchar(6) NOT NULL DEFAULT '777777',
                `widgetBorder` tinyint(1) NOT NULL DEFAULT '1',
                `radius` int(11) NOT NULL DEFAULT '5',
                `borderColor` varchar(6) NOT NULL DEFAULT 'DDDDDD',
                PRIMARY KEY (`content`)
                );";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
        
        self::dbInsert('username', 'statigram');
    }
  
    /**
     * Remove database table for widget
     * 
     * call register_deactivation_hook(__FILE__,'dbRemove'); in activation plugin file
     * 
     * @return null 
     */
    public function dbRemove()
    {
        global $wpdb;
        
        $table_name = self::getTableName(); 

        $sql = "DROP TABLE $table_name;";
        $e = $wpdb->query($sql);      
    }
    
    /**
     * Insert de valeur dans la database
     * 
     * call register_activation_hook(__FILE__,'dbInsert'); in activation plugin file
     * 
     * @param type $field
     * @param type $value 
     */
    public function dbUpdateOneField($field, $value)
    {
        if (isset($field) && isset($value)) {
            global $wpdb;
        
            $table_name = self::getTableName(); 
                
            $querystr = "UPDATE $table_name SET `$field` =  '$value' ;";
            $wpdb->query($querystr);
        }
    }
    
    
    public function dbUpdateMultiFields($postDatas)
    {
        if (isset($postDatas)) {
            self::dbUpdateOneField('content', $postDatas['choose-content']);
            self::dbUpdateOneField('username', $postDatas['username']);
            if ($postDatas['infos'] == 'on') {
                self::dbUpdateOneField('infos', 1);
            } else {
                self::dbUpdateOneField('infos', 0);
            }
            self::dbUpdateOneField('hashtag', $postDatas['hashtag']);
            self::dbUpdateOneField('linking', $postDatas['linking']);
            self::dbUpdateOneField('width', $postDatas['width']);
            self::dbUpdateOneField('height', $postDatas['height']);
            self::dbUpdateOneField('mode', $postDatas['choose-mode']);
            self::dbUpdateOneField('layoutX', $postDatas['layoutX']);
            self::dbUpdateOneField('layoutY', $postDatas['layoutY']);
            self::dbUpdateOneField('padding', $postDatas['padding']);
            self::dbUpdateOneField('pace', $postDatas['pace']);
            if ($postDatas['photo-border'] == 'on') {
                self::dbUpdateOneField('photoBorder', 1);
            } else {
                self::dbUpdateOneField('photoBorder', 0);
            }
            self::dbUpdateOneField('background', $postDatas['background']);
            self::dbUpdateOneField('text', $postDatas['text']);
            if ($postDatas['widget-border'] == 'on') {
                self::dbUpdateOneField('widgetBorder', 1);
            } else {
                self::dbUpdateOneField('widgetBorder', 0);
            }
            self::dbUpdateOneField('radius', $postDatas['radius']);
            self::dbUpdateOneField('borderColor', $postDatas['border-color']);
        }
    }
    
    
    /**
     * Mise Ã  jour du champ $field avec la valeur $value
     * 
     * @global type $wpdb
     * @param type $field
     * @param type $value 
     */
    public function dbInsert($field, $value)
    {
        if (isset($field) && isset($value)) {
            global $wpdb;
            
            $table_name = self::getTableName(); 

            $wpdb->insert( $table_name, array( "$field" => $value));
        }        
    }
    
    
    
    public function getPluginValues()
    {
        global $wpdb;
            
        $table_name = self::getTableName(); 
        
        $querystr = "SELECT * FROM $table_name WHERE 1=1";

        $pluginValues = $wpdb->get_row($querystr, OBJECT);
        
        return $pluginValues;
    }
    
    
    
    
}

?>
